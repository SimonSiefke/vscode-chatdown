{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Schema for bot configuration files",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "ServiceId": {
      "type": "string",
      "pattern": "^[\\da-f]{8}-?[\\da-f]{4}-?[1-5][\\da-f]{3}-?[89ab][\\da-f]{3}-?[\\da-f]{12}$"
    },
    "ServiceType": {
      "type": "string",
      "description": "Type of the service",
      "enum": [
        "appInsights",
        "abs",
        "blob",
        "cosmosdb",
        "generic",
        "endpoint",
        "luis",
        "qna",
        "dispatch",
        "file"
      ]
    },
    "ConnectedService": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "type": {
          "description": "Type of the service",
          "$ref": "#/definitions/ServiceType"
        },
        "name": {
          "type": "string",
          "description": "Human friendly name for the service"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the service"
        }
      }
    },
    "AzureService": {
      "allOf": [
        {
          "$ref": "#/definitions/ConnectedService"
        },
        {
          "type": "object",
          "required": ["tenantId", "subscriptionId", "resourceGroup", "serviceName"],
          "properties": {
            "tenantId": {
              "$ref": "#/definitions/ServiceId",
              "description": "Tenant ID for azure"
            },
            "subscriptionId": {
              "$ref": "#/definitions/ServiceId",
              "description": "Subscription ID for azure"
            },
            "resourceGroup": {
              "type": "string",
              "description": "Resource group for azure"
            },
            "serviceName": {
              "type": "string",
              "description": "Name of the azure service"
            }
          }
        }
      ]
    },
    "AppInsightsService": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureService"
        },
        {
          "type": "object",
          "description": "App Insights service",
          "additionalProperties": false,
          "$comment": "tenantId, subscriptionId, resourceGroup, serviceName, name, id are external",
          "required": ["instrumentationKey"],
          "properties": {
            "tenantId": {},
            "subscriptionId": {},
            "resourceGroup": {},
            "serviceName": {},
            "name": {},
            "id": {},
            "type": {
              "const": "appInsights"
            },
            "instrumentationKey": {
              "type": "string",
              "description": "Instrumentation key for logging data to appInsights"
            },
            "applicationId": {
              "type": "string",
              "description": "Application id used for programmatic access to AppInsights"
            },
            "apiKeys": {
              "type": "object",
              "description": "Named api keys for programmatic access to AppInsights",
              "additionalProperties": {
                "type": "string"
              },
              "minProperties": 1
            }
          }
        }
      ]
    },
    "BotService": {
      "allOf": [
        {
          "$ref": "#/definitions/AzureService"
        },
        {
          "description": "Azure bot service",
          "type": "object",
          "additionalProperties": false,
          "$comment": "tenantId, subscriptionId, resourceGroup, serviceName, name, id are external",
          "properties": {
            "tenantId": {},
            "subscriptionId": {},
            "resourceGroup": {},
            "serviceName": {},
            "name": {},
            "id": {},
            "appId": {
              "$ref": "#/definitions/ServiceId",
              "description": "App id for the bot"
            },
            "type": {
              "const": "abs"
            }
          }
        }
      ]
    },
    "BlobStorageService": {
      "description": "Blob storage service",
      "allOf": [
        {
          "$ref": "#/definitions/AzureService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["connectionString"],
          "$comment": "tenantId, subscriptionId, resourceGroup, serviceName, name, id are external",
          "properties": {
            "tenantId": {},
            "subscriptionId": {},
            "resourceGroup": {},
            "serviceName": {},
            "name": {},
            "id": {},
            "connectionString": {
              "type": "string",
              "description": "Connection string for blob storage"
            },
            "container": {
              "type": "string",
              "description": "Container name"
            },
            "type": {
              "const": "blob"
            }
          }
        }
      ]
    },
    "CosmosDBService": {
      "description": "CosmosDB service",
      "allOf": [
        {
          "$ref": "#/definitions/AzureService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "$comment": "tenantId, subscriptionId, resourceGroup, serviceName, name, id are external",
          "required": ["endpoint", "key", "database", "collection"],
          "properties": {
            "tenantId": {},
            "subscriptionId": {},
            "resourceGroup": {},
            "serviceName": {},
            "name": {},
            "id": {},
            "type": {
              "const": "cosmosdb"
            },
            "endpoint": {
              "type": "string",
              "description": "Endpoint for CosmosDB",
              "format": "uri"
            },
            "key": {
              "type": "string",
              "description": "Key for accessing CosmosDB"
            },
            "database": {
              "type": "string",
              "description": "Database name"
            },
            "collection": {
              "type": "string",
              "description": "Collection name"
            }
          }
        }
      ]
    },
    "GenericService": {
      "description": "Generic service",
      "allOf": [
        {
          "$ref": "#/definitions/ConnectedService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "$comment": "id, name are external",
          "required": ["url", "configuration"],
          "properties": {
            "id": {},
            "name": {},
            "type": {
              "const": "generic"
            },
            "url": {
              "type": "string",
              "description": "Deep link to service",
              "format": "uri"
            },
            "configuration": {
              "type": "object",
              "description": "Configuration for the service",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "EndpointService": {
      "description": "Endpoint Service",
      "allOf": [
        {
          "$ref": "#/definitions/ConnectedService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "$comment": "id and name are external",
          "properties": {
            "id": {},
            "name": {
              "default": "development"
            },
            "appId": {
              "description": "App id for the bot",
              "$ref": "#/definitions/ServiceId"
            },
            "appPassword": {
              "description": "App password for the bot",
              "type": "string"
            },
            "endpoint": {
              "type": "string",
              "description": "Endpoint of localhost service",
              "format": "uri",
              "pattern": "http://localhost:\\d{1,5}/api/messages"
            },
            "type": {
              "const": "endpoint"
            }
          }
        }
      ]
    },
    "LuisService": {
      "description": "LUIS service",
      "allOf": [
        {
          "$ref": "#/definitions/ConnectedService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["appId"],
          "$comment": "id, name and type are external",
          "properties": {
            "id": {},
            "name": {},
            "appId": {
              "type": "string",
              "description": "Luis app id"
            },
            "authoringKey": {
              "$ref": "#/definitions/ServiceId",
              "description": "Authoring key for using authoring api"
            },
            "subscriptionKey": {
              "$ref": "#/definitions/ServiceId",
              "description": "Subscription key for using calling model api for predictions"
            },
            "version": {
              "type": "string",
              "description": "Version of the application",
              "pattern": "^[\\da-zA-Z.]{1,10}$"
            },
            "region": {
              "type": "string",
              "description": "Region for Luis",
              "enum": ["westus"]
            },
            "type": {
              "const": "luis"
            }
          }
        }
      ]
    },
    "QnAService": {
      "description": "QnA service",
      "allOf": [
        {
          "$ref": "#/definitions/ConnectedService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "$comment": "id, name are external",
          "required": ["subscriptionKey", "kbId", "hostname", "endpointKey"],
          "properties": {
            "id": {},
            "name": {},
            "type": {
              "const": "qna"
            },
            "subscriptionKey": {
              "$ref": "#/definitions/ServiceId",
              "description": "Subscription key for calling admin api"
            },
            "kbId": {
              "$ref": "#/definitions/ServiceId",
              "description": "Knowledge base ID"
            },
            "hostname": {
              "type": "string",
              "description": "Hostname for private service endpoint",
              "format": "uri",
              "examples": ["https://myqna.azurewebsites.net"]
            },
            "endpointKey": {
              "$ref": "#/definitions/ServiceId",
              "description": "Endpoint Key for querying the knowledge base"
            }
          }
        }
      ]
    },
    "DispatchService": {
      "description": "Dispatch service",
      "allOf": [
        {
          "$ref": "#/definitions/LuisService"
        },
        {
          "type": "object",
          "additionalProperties": false,
          "required": ["serviceIds"],
          "properties": {
            "serviceIds": {
              "type": "array",
              "description": "Service id's that the dispatch model will dispatch across",
              "items": {
                "$ref": "#/definitions/ServiceId"
              }
            },
            "type": {
              "const": "dispatch"
            }
          }
        }
      ]
    },
    "FileService": {
      "description": "File service",
      "allOf": [
        { "$ref": "#/definitions/ConnectedService" },
        {
          "type": "object",
          "additionalProperties": false,
          "$comment": "name and id are external",
          "properties": {
            "name": {},
            "id": {},
            "path": {
              "type": "string",
              "description": "File path",
              "format": "uri"
            },
            "type": {
              "const": "file"
            }
          }
        }
      ]
    },

    "ConnectedServices": {
      "$comment": "All the possible services",
      "if": {
        "minProperties": 1,
        "properties": {
          "type": {
            "const": "appInsights"
          }
        }
      },
      "then": {
        "$ref": "#/definitions/AppInsightsService"
      },
      "else": {
        "if": {
          "minProperties": 1,
          "properties": {
            "type": {
              "type": "string",
              "const": "abs"
            }
          }
        },
        "then": {
          "$ref": "#/definitions/BotService"
        },
        "else": {
          "if": {
            "minProperties": 1,
            "properties": {
              "type": {
                "const": "blob"
              }
            }
          },
          "then": {
            "$ref": "#/definitions/BlobStorageService"
          },
          "else": {
            "if": {
              "minProperties": 1,
              "properties": {
                "type": {
                  "const": "cosmosdb"
                }
              }
            },
            "then": {
              "$ref": "#/definitions/CosmosDBService"
            },
            "else": {
              "if": {
                "minProperties": 1,
                "properties": {
                  "type": {
                    "const": "generic"
                  }
                }
              },
              "then": {
                "$ref": "#/definitions/GenericService"
              },
              "else": {
                "if": {
                  "minProperties": 1,
                  "properties": {
                    "type": {
                      "const": "endpoint"
                    }
                  }
                },
                "then": {
                  "$ref": "#/definitions/EndpointService"
                },
                "else": {
                  "if": {
                    "minProperties": 1,
                    "properties": {
                      "type": {
                        "const": "luis"
                      }
                    }
                  },
                  "then": {
                    "$ref": "#/definitions/LuisService"
                  },
                  "else": {
                    "if": {
                      "minProperties": 1,
                      "properties": {
                        "type": {
                          "const": "qna"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/definitions/QnAService"
                    },
                    "else": {
                      "if": {
                        "minProperties": 1,
                        "properties": {
                          "type": {
                            "const": "file"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/definitions/FileService"
                      },
                      "else": {
                        "type": "object",
                        "description": "Service",
                        "additionalProperties": false,
                        "required": ["type"],
                        "properties": {
                          "type": {
                            "$ref": "#/definitions/ServiceType"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BotConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the bot"
        },
        "description": {
          "type": "string",
          "description": "Description of the bot"
        },
        "padlock": {
          "type": "string",
          "description": "Encrypted GUID used to validate password is the same. You need to be able to decrypt this key with a passed in secret before we will use the secret to encrypt new values."
        },
        "version": {
          "type": "string",
          "description": "Version of the schema of this file"
        },
        "services": {
          "type": "array",
          "description": "The services that the bot uses",
          "items": {
            "$ref": "#/definitions/ConnectedServices"
          }
        }
      }
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/BotConfiguration"
    }
  ]
}
